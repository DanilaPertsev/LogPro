% Реализация стандартных предикатов обработки списков

% Принадлежность элемента списку member
% (элемент, список)
newMember(X, [X|_]).
newMember(X, [_|L]):-newMember(X,L).

% Конкатeнация двух списков append
% (список 1, список 2, список-результат)
newAppend([], L, L).
newAppend([X|L1], L2, [X|L3]):-newAppend(L1, L2, L3).

% Удаление элемента из списка remove
% (элемент, список, результирующий список без элемента)
newRemove(X, [X|L], L).
newRemove(X, [Y|L], [Y|Z]):-newRemove(X, L, Z).

% Подсписки списка sublist
% (подсписок, список)
newSublist(S, L):-newAppend(_, L1, L), newAppend(S, _, L1).

% Длина списка length
% (список, длина)
newLength([], 0).
newLength([_|L], N):-newLength(L, M), N is M + 1.

% Перестановки элементов в списке permute
% (список, перестановка)
newPermute([], []).
newPermute(L, [X|T]):-newRemove(X, L, Y), newPermute(Y, T).

%замена n-ого элемента списка на указанный
%без встроенных предикатов обработки (номер элемента,
% значение, которое нужно вставить, список, результирующий список)


replace_item(1, Item, [_|Xs], [Item|Xs]).
replace_item(N, Item, [X|Xs], [X|Ys]) :-
    N1 is N - 1,
    replace_item(N1, Item, Xs, Ys).



% с помощью встроенных предикатов обработки (список, номер элемента,
% значение, которое нужно вставить, результирующий список)
replace([],_,_,[]).
replace(L,N,X,L1):-
    N1 is N-1,
    append(A,[Y|B],L), length(A, N1),
    append(A,[X|B],L1).

% Разделение списка на два относительно первого элемента (по принципу
% "больше-меньше")
%(список, список меньше, список больше или
% равно)

proc([],_,[],[]).
proc([H|Tail],X,[H|A],B):-H<X,!,proc(Tail,X,A,B).
proc([H|Tail],X,A,[H|B]):-proc(Tail,X,A,B).

split([H|Tail],A,B):-proc(Tail,H,A,B).

% совместное использование(замена первого элемента списка на указанный и
% разделение по спискам уже относительно него)
p(L,X,L1,A,B):-
    replace(L,1,X,L1),
    split(L1,A,B).

